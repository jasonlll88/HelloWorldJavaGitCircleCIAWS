version: 2
jobs:
  build:
    working_directory: ~/HelloWorldGitCircleCIAWS

    machine:
      environment:
        SPRING_PROFILES_ACTIVE: test
      timezone:
        America/Bogota
      # Here’s an example of how to set the version of Java to be used for your tests.
      java:
        version: openjdk8
      # You can enable other databases and services from the services section
      services:
        - docker

    general:
      artifacts:
        - "target/app.jar"

    steps:
      #In this case, the checkout step will checkout project source code into the job’s working_directory.
      - checkout
      - restore_cache:
          key: HelloWorldJavaGitCircleCIAWS-{{ checksum "pom.xml" }}
      - run: git config --global user.email jasonlll88@hotmail.com
      - run: git config --global user.name jasonlll88
      - run: mvn clean install

      - save_cache:
          # https://circleci.com/docs/2.0/caching/#caching-libraries MAVEN
          paths:
            - ~/.m2
          # https://circleci.com/docs/2.0/caching/#using-keys-and-templates
          # we can use the pom.xml  ????
          key: HelloWorldJavaGitCircleCIAWS-{{ checksum "pom.xml" }}

      - deploy:
         # name of the deploy
         name: Deploy HelloWorldJavaGitCircleCIAWS

         command: |
          if [ "${CIRCLE_BRANCH}" == "master" ]; then
              if [[ `git log -1` =~ "[maven-release-plugin]" ]]; then
                   echo "Ignoring release plugin generated version"
               else
                echo "Preparing release..."
                mvn -B release:prepare -Dmaven.test.skip=true

                JQ="jq -r -e"

                SERVICE_NAME="prod-accountopen-HelloWorldJavaGitCircleCIAWS-service"
                CLUSTER_NAME="bdb-accountopen-prod-adapters-cluster"
                BUILD_NUMBER=${CIRCLE_BUILD_NUM}
                IMAGE_TAG=${CIRCLE_SHA1}
                TASK_FAMILY="prod-accountopen-HelloWorldJavaGitCircleCIAWS-task-family"
                AWS_ACCOUNT_ID=058018423448

                # define function
                configure_aws_cli(){
                    # verify version of AWS
                    aws --version
                    # configure the dafult regiion
                    aws configure set default.region us-east-1
                    # configure the output format
                    aws configure set default.output json
                }
                

                # define function
                push_ecr_image(){
                    # http://docs.aws.amazon.com/cli/latest/reference/ecr/get-login.html
                    eval $(aws ecr get-login --region us-east-1)

                    # Create a docker image from the source of this folder
                    docker build -t $ENVIRONMENT-$APP_NAME .

                    # modify the tag of the image builded
                    docker tag $ENVIRONMENT-$APP_NAME $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$ENVIRONMENT-$APP_NAME:$VERSION

                    # Push the docker image to the AWS instance
                    docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$ENVIRONMENT-$APP_NAME:$VERSION
                }

                deploy_cluster(){

                    # Call this function
                    make_task_def
                    # Call this function
                    register_task_definition

                    if  [ ${ENVIRONMENT} != "prod" ]; then
                        echo ${CLUSTER_NAME}
                        echo ${SERVICE_NAME}

                        DESIRED_COUNT=$(aws ecs describe-services --cluster ${CLUSTER_NAME} --services ${SERVICE_NAME} | egrep "desiredCount" | head -1 | tr "/" " " | awk '{print $2}' | sed 's/,$//')
                        if [ ${DESIRED_COUNT} = "0" ]; then
                            DESIRED_COUNT="1"
                        fi
                        #DESIRED_COUNT="1"

                        tasks=$(aws --region us-east-1 ecs list-tasks --cluster $CLUSTER_NAME --family ${TASK_FAMILY} | jq -r '.taskArns | map(.[40:]) | reduce .[] as $item (""; . + $item + " ")')
                        for task in $tasks; do
                            aws --region us-east-1 ecs stop-task --task $task --cluster $CLUSTER_NAME
                            echo "Service stoped: $task"
                        done
                        #aws --region us-west-2 ecs deregister-container-instance --cluster $cluster --container-instance $container_instance

                        if [[ $(aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $revision --desired-count ${DESIRED_COUNT} | \
                                       $JQ '.service.taskDefinition') != $revision ]]; then
                            echo "Error updating service."
                            return 1
                        else
                            echo "Update service.."
                        fi
                    fi

                }

                make_task_def(){

                    # http://docs.aws.amazon.com/cli/latest/reference/ecs/describe-task-definition.html
                    TASK_ALL=$(aws ecs describe-task-definition --task-definition ${TASK_FAMILY})
                    echo "Task All: $TASK_ALL"


                    TASK_TEMPLATE=$(aws ecs describe-task-definition --task-definition ${TASK_FAMILY} | jq -r .taskDefinition.containerDefinitions[0])
                    echo "Template anterior: $TASK_TEMPLATE"

                    NEW_CONTAINER_DEFINITIONS=$(echo "$TASK_TEMPLATE" | jq ".image = \"%s.dkr.ecr.us-east-1.amazonaws.com/${ENVIRONMENT}-${APP_NAME}:%s\""  )

                    echo "Template nuevo: $NEW_CONTAINER_DEFINITIONS"

                    task_def=$(printf "$NEW_CONTAINER_DEFINITIONS" $AWS_ACCOUNT_ID $VERSION)
                }

                register_task_definition() {
                    #--container-definitions "$task_def"
                    if revision=$(aws ecs register-task-definition --container-definitions "$task_def" --family $TASK_FAMILY | $JQ '.taskDefinition.taskDefinitionArn'); then
                        echo "Revision: $revision"
                    else
                        echo "Failed to register task definition"
                        return 1
                    fi

                }

                setup_env_amazon()
                {
                    if  [ ${ENVIRONMENT} = "prod" ]; then
                        export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_PROD
                        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD
                        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD
                    fi
                }

                setup_env_amazon
                configure_aws_cli
                push_ecr_image
                deploy_cluster



              fi
            else
              echo "Not deploy in master"
            fi



      # chmod 755 deploy.sh && ./deploy.sh HelloWorldJavaGitCircleCIAWS adapters prod "$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version|grep -Ev '(^\[|Download\w+:)')"
      #JQ="jq -r -e"


      ###### sonar

      # - run:
      #     name: SONAR
      #     # if the branch is master then run
      #     command:|
      #       if [ "${CIRCLE_BRANCH}" == "master" ]; then
      #                     mvn sonar:sonar -s settings_sonar.xml
      #       fi


#     docker:
#       - image: circleci/openjdk:8-jdk-browsers
#     steps:
#       - checkout
#       # - run: echo "hello world"
#       - run: pwd
#       - run: ls
#       - run: cat README.md
#       - run: ls ../
#       - restore_cache:
#           key: HelloWorldJavaGitCircleCIAWS-{{ checksum "pom.xml" }}
#       - run: mvn dependency:go-offline
#       - run: mvn clean install
#       - save_cache:
#           paths:
#             - ~/.m2
#           key: HelloWorldJavaGitCircleCIAWS-{{ checksum "pom.xml" }}
#       - run: mvn test
#       - run: mvn package
# #      - run: mvn exec:java -Dexec.mainClass="main.java.HelloWorldGitCircleCIAWS"
# #      - run: mvn exec:java
#       - deploy:
#           name: Deploy HelloWorldJava
#           command: |
#             if [ "${CIRCLE_BRANCH}" == "master" ]; then
#               if [[ `git log -1` =~ "[maven-release-plugin]" ]]; then
#                    echo "Ignoring release plugin generated version"
#               else
#                 echo "Preparing release..."
#                 mvn -B release:prepare -Dmaven.test.skip=true -s settings.xml
#
#
#       - store_test_results:
#           path: target/surefire-reports
#       - store_artifacts:
#           path: target/demo-java-0.0.1-SNAPSHOT.jar
